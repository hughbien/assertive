.TH assert_fail 3
.SH NAME
.PP
assert_fail - trigger a failed assertion
.SH SYNOPSIS
.PP
.nf
\f[C]
#include <assertive.h>

int assert_fail(cost char *filename, int line, const char *format, ...);
\f[]
.SH DESCRIPTION
.PP
.nf
Use in your own custom assertions to trigger a failure.  It requires the
current filename and the line number where the failure occured.  Use macros
so you don't have to manually pass these.  The last parameters form the failure
message.

Here's an example that asserts the argument is equal to `99`:

\f[C]
  #define assert_is_99(i) assert_is_99_(__FILE__,__LINE__,(i))

  void assert_is_99_(const char *file, int line, int num) {
    if (num != 99) {
      assert_fail(file, line, "Expected <99> but was <%d>", num);
    }
  }

  void test_example {
    assert_is_99(99);  /* passes */
    assert_is_99(100); /* fails */
  }
\f[]

.SH SEE ALSO
.PP
.nf
assertive(3), assert_true(3), assert_false(3), assert_null(3),
assert_not_null(3), assert_str_equal(3), assert_str_not_equal(3),
assert_int_equal(3), assert_int_not_equal(3), assert_dbl_equal(3),
assert_dbl_not_equal(3), assert_ptr_equal(3), assert_ptr_not_equal(3),
assert_add(3), assert_run(3)
